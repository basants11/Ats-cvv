version: '3.8'

services:
  # API Gateway Service
  api-gateway:
    build:
      context: .
      dockerfile: Dockerfile
      target: production
    ports:
      - "8000:8000"
    environment:
      - HOST=0.0.0.0
      - PORT=8000
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ai_fusion_core
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    volumes:
      - ./app:/app/app
    networks:
      - ai-fusion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # AI Kernel Service
  ai-kernel:
    build:
      context: ./services/ai-kernel-service
      dockerfile: Dockerfile
      target: production
    ports:
      - "8001:8001"
      - "50051:50051"
    environment:
      - HOST=0.0.0.0
      - HTTP_PORT=8001
      - GRPC_PORT=50051
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ai_fusion_core
      - REDIS_URL=redis://redis:6379/0
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - PINECONE_API_KEY=${PINECONE_API_KEY}
      - VECTOR_DB_TYPE=pinecone
    depends_on:
      - postgres
      - redis
      - vector-db
    volumes:
      - ./services/ai-kernel-service:/app
    networks:
      - ai-fusion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # Identity Service
  identity:
    build:
      context: ./services/identity-service
      dockerfile: Dockerfile
      target: production
    ports:
      - "8002:8002"
      - "50052:50052"
    environment:
      - HOST=0.0.0.0
      - HTTP_PORT=8002
      - GRPC_PORT=50052
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ai_fusion_core
      - REDIS_URL=redis://redis:6379/0
      - SECRET_KEY=${SECRET_KEY:-your-secret-key}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/identity-service:/app
    networks:
      - ai-fusion-network
    restart: unless-stopped

  # CV Engine Service
  cv-engine:
    build:
      context: ./services/cv-engine-service
      dockerfile: Dockerfile
      target: production
    ports:
      - "8003:8003"
      - "50053:50053"
    environment:
      - HOST=0.0.0.0
      - HTTP_PORT=8003
      - GRPC_PORT=50053
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ai_fusion_core
      - REDIS_URL=redis://redis:6379/0
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/cv-engine-service:/app
    networks:
      - ai-fusion-network
    restart: unless-stopped

  # Conversational Service
  conversational:
    build:
      context: ./services/conversational-service
      dockerfile: Dockerfile
      target: production
    ports:
      - "8004:8004"
      - "50054:50054"
    environment:
      - HOST=0.0.0.0
      - HTTP_PORT=8004
      - GRPC_PORT=50054
      - DEBUG=false
      - OPENAI_API_KEY=${OPENAI_API_KEY}
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/conversational-service:/app
    networks:
      - ai-fusion-network
    restart: unless-stopped

  # Analytics Service
  analytics:
    build:
      context: ./services/analytics-service
      dockerfile: Dockerfile
      target: production
    ports:
      - "8005:8005"
      - "50055:50055"
    environment:
      - HOST=0.0.0.0
      - HTTP_PORT=8005
      - GRPC_PORT=50055
      - DEBUG=false
      - DATABASE_URL=postgresql://postgres:password@postgres:5432/ai_fusion_core
    depends_on:
      - postgres
      - redis
    volumes:
      - ./services/analytics-service:/app
    networks:
      - ai-fusion-network
    restart: unless-stopped

  # Automation Service
  automation:
    build:
      context: ./services/automation-service
      dockerfile: Dockerfile
      target: production
    ports:
      - "8006:8006"
      - "50056:50056"
    environment:
      - HOST=0.0.0.0
      - HTTP_PORT=8006
      - GRPC_PORT=50056
      - DEBUG=false
    volumes:
      - ./services/automation-service:/app
    networks:
      - ai-fusion-network
    restart: unless-stopped

  # Vision Service
  vision:
    build:
      context: ./services/vision-service
      dockerfile: Dockerfile
      target: production
    ports:
      - "8007:8007"
      - "50057:50057"
    environment:
      - HOST=0.0.0.0
      - HTTP_PORT=8007
      - GRPC_PORT=50057
      - DEBUG=false
    volumes:
      - ./services/vision-service:/app
    networks:
      - ai-fusion-network
    restart: unless-stopped

  # Plugin Service
  plugin:
    build:
      context: ./services/plugin-service
      dockerfile: Dockerfile
      target: production
    ports:
      - "8008:8008"
      - "50058:50058"
    environment:
      - HOST=0.0.0.0
      - HTTP_PORT=8008
      - GRPC_PORT=50058
      - DEBUG=false
    volumes:
      - ./services/plugin-service:/app
      - plugin-data:/app/plugins
    networks:
      - ai-fusion-network
    restart: unless-stopped

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    environment:
      POSTGRES_DB: ai_fusion_core
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
    ports:
      - "5432:5432"
    volumes:
      - postgres-data:/var/lib/postgresql/data
    networks:
      - ai-fusion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis Cache
  redis:
    image: redis:7-alpine
    ports:
      - "6379:6379"
    volumes:
      - redis-data:/data
    networks:
      - ai-fusion-network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 10s
      timeout: 3s
      retries: 3

  # Vector Database (Pinecone alternative - using Qdrant for demo)
  vector-db:
    image: qdrant/qdrant:v1.7.0
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - vector-data:/qdrant/storage
    networks:
      - ai-fusion-network
    restart: unless-stopped

networks:
  ai-fusion-network:
    driver: bridge

volumes:
  postgres-data:
  redis-data:
  vector-data:
  plugin-data: